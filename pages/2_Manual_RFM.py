import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import altair as alt
import plotly.express as px

st.set_page_config(page_title='Customer Segmentation', page_icon='üçò')

columns = ['customer_id','date','quantity','spend']
df = pd.read_fwf('CDNOW_master.txt', header=None, names=columns)
df_rfm = pd.read_csv('Data_RFM.csv')


# GUI
# Command
st.title("Customer Segmentation Project")

st.subheader('Manual FRM Analysis')
st.write('Ph√¢n nh√≥m th·ªß c√¥ng d·ª±a tr√™n nghi·ªáp v·ª•')
'---'
st.write('1. D·ªØ li·ªáu th√¥ c·ªßa doanh nghi·ªáp')
st.dataframe(df.head(5))

st.write('2. D·ªØ li·ªáu sau khi bi·∫øn ƒë·ªïi RFM ')
st.dataframe(df_rfm.head(5))

st.write('D·ª±a tr√™n c√°c gi√° tr·ªã RFM c·ªßa t·ª´ng kh√°ch h√†ng, ta s·∫Ω t√≠nh ƒëi·ªÉm RFM cho kh√°ch h√†ng ƒë√≥. Sau ƒë√≥, d·ª±a v√†o ki·∫øn th·ª©c nghi·ªáp v·ª• ti·∫øn h√†nh ph√¢n c·ª•m kh√°ch h√†ng v√†o c√°c nh√≥m t∆∞∆°ng ·ª©ng')

# create labels for recency, frequency and monetary
r_labels = range(4,0,-1)
f_labels = range(1,5)
m_labels = range(1,5)

# assign these labels to 4 equal percentile groups
r_groups = pd.qcut(df_rfm['Recency'].rank(method='first'), q=4, labels=r_labels)
f_groups = pd.qcut(df_rfm['Frequency'].rank(method='first'), q=4, labels=f_labels)
m_groups = pd.qcut(df_rfm['Monetary'].rank(method='first'), q=4, labels=m_labels)

# create R, F, M columns
df_rfm = df_rfm.assign(R=r_groups.values, F=f_groups.values, M=m_groups.values)

# t√≠nh to√°n rfm score
df_rfm['RFM_score'] = df_rfm[['R','F','M']].sum(axis=1)

def rfm_level(df):
    if (df['RFM_score'] == 12) :
        return 'STARS'
    
    elif (df['R'] == 4 and df['F'] ==1 and df['M'] == 1):
        return 'NEW'
    
    else:     
        if df['M'] == 4:
            return 'BIG SPENDER'
        
        elif df['F'] == 4:
            return 'LOYAL'
        
        elif df['R'] == 4:
            return 'ACTIVE'
        
        elif df['R'] == 1:
            return 'LOST'
        
        elif df['M'] == 1:
            return 'LIGHT'
        
        return 'REGULARS'
    
# create a new column RFM_level
df_rfm['RFM_level'] = df_rfm.apply(rfm_level, axis=1)

st.write('3. D·ªØ li·ªáu sau khi ƒë√£ t√≠nh ƒëi·ªÉm RFM v√† ph√¢n c·ª•m')
st.dataframe(df_rfm.head(5))

# calculate average values for each RFM_level and return a size of each segment
rfm_agg = df_rfm.groupby('RFM_level').agg({
    'Recency':'mean',
    'Frequency':'mean',
    'Monetary':['mean','count']
}).round(0)
rfm_agg.columns = rfm_agg.columns.droplevel()
rfm_agg.columns = ['RecencyMean','FrequencyMean','MonetaryMean','Count']
rfm_agg['Percent'] = round((rfm_agg['Count']/rfm_agg.Count.sum())*100,2)

# reset the index
rfm_agg = rfm_agg.reset_index()
rfm_agg = rfm_agg.sort_values(by='Count', ascending=False)

st.write('4. T√≠nh gi√° tr·ªã trung b√¨nh cho m·ªói RFM_level v√† k√≠ch th∆∞·ªõc c·ªßa t·ª´ng ph√¢n c·ª•m')
st.dataframe(rfm_agg)

#st.subheader('Bi·ªÉu ƒë·ªì k√≠ch th∆∞·ªõc nh√≥m kh√°ch h√†ng theo ph√¢n c·ª•m')
#c = alt.Chart(rfm_agg).mark_bar().encode(x=alt.X('RFM_level', sort=None), y='Count')
#st.altair_chart(c, use_container_width=True)

st.subheader('Bi·ªÉu ƒë·ªì')
tab_chart = st.radio('Ch·ªçn bi·ªÉu ƒë·ªì',['K√≠ch th∆∞·ªõc theo t·ª´ng ph√¢n c·ª•m kh√°ch h√†ng','Scatter plot RFM','3d Scatter plot RFM'])
if tab_chart == 'K√≠ch th∆∞·ªõc theo t·ª´ng ph√¢n c·ª•m kh√°ch h√†ng':
    c = alt.Chart(rfm_agg).mark_bar().encode(x=alt.X('RFM_level', sort=None), y='Count')
    st.altair_chart(c, use_container_width=True)
elif tab_chart == 'Scatter plot RFM':
    fig1 = px.scatter(rfm_agg, x='RecencyMean', y='MonetaryMean', size='FrequencyMean', color='RFM_level', hover_name='RFM_level', size_max=100)
    st.plotly_chart(fig1)
else:
    fig2 = px.scatter_3d(df_rfm, x='Recency', y='Frequency', z='Monetary', color='RFM_level', opacity=0.5)
    fig2.update_traces(maker=dict(size=5), selector=dict(mode='makers'))
    st.plotly_chart(fig2)

st.write()

st.subheader('K·∫øt lu·∫≠n')
st.write('''D·ª±a v√†o ki·∫øn th·ª©c nghi·ªáp v·ª• ta chia kh√°ch h√†ng th√†nh 8 nh√≥m:
- STARS: nh√≥m kh√°ch h√†ng c√≥ Recency r·∫•t g·∫ßn, Frequency cao v√† Monetary cao, ƒë√¢y c≈©ng l√† nh√≥m kh√°ch h√†ng c√≥ gi√° tr·ªã nh·∫•t ƒë·ªëi vs doanh nghi·ªáp
- BIG SPENDER: nh√≥m kh√°ch h√†ng c√≥ Monetary cao, Freqency v√† Monetary trung b√¨nh
- LOYAL: nh√≥m kh√°ch h√†ng c√≥ Frequency cao
- ACTIVE: nh√≥m kh√°ch h√†ng c√≥ Recency g·∫ßn ƒë√¢y, Frequency v√† Monetary trung b√¨nh
- LIGHT: nh√≥m kh√°ch h√†ng c√≥ Monetary th·∫•p
- NEW: nh√≥m kh√°ch h√†ng c√≥ Recency r·∫•t g·∫ßn, Frequency v√† Monetary th·∫•p
- LOST: nh√≥m kh√°ch h√†ng c√≥ Recency c√°ch ƒë√¢y r·∫•t l√¢u
- REGULARS: nh√≥m kh√°ch h√†ng c√≥ t·∫•t c·∫£ ch·ªâ s·ªë ·ªü m·ª©c trung b√¨nh
''')
