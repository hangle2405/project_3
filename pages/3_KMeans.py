import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import altair as alt
import plotly.express as px
from sklearn.cluster import KMeans
import pickle

st.set_page_config(page_title='Customer Segmentation', page_icon='üçò')

# GUI
st.title("Customer Segmentation Project")

st.subheader('KMeans algorithm')
st.write('Ph√¢n c·ª•m b·∫±ng thu·∫≠t to√°n KMeans')
'---'
df_rfm = pd.read_csv('Data_RFM.csv')
df_rfm = df_rfm[['Recency','Frequency','Monetary']]
st.write('D·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω RFM ')
st.dataframe(df_rfm.head(5))

st.subheader('KMeans clusters with the Elbow method')

st.write('1. Hopkins test')
st.code('''hopkins = hopkins(df_now, df_now.shape[0])
hopkins = 0.0028477600060840776''')
st.write('Gi√° tr·ªã cho th·∫•y c√≥ th·ªÉ ph√¢n c·ª•m')

sse = {}
for k in range(1, 20):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(df_rfm)
    sse[k] = kmeans.inertia_
fig1 = plt.figure(figsize=(10,4))
plt.title('The Elbow Method')
plt.xlabel('k')
plt.ylabel('SSE')
sns.pointplot(x=list(sse.keys()), y=list(sse.values()))
st.pyplot(fig1)

st.write('Ta ch·ªçn k = 4')

# build model with k=4
model = KMeans(n_clusters=4, random_state=42)
model.fit(df_rfm)
model.labels_.shape

# Calculate average values for each RFM_Level, and return a size of each segment 
df_rfm['Cluster'] = model.labels_
rfm_agg2 = df_rfm.groupby('Cluster').agg({
    'Recency': 'mean',
    'Frequency': 'mean',
    'Monetary': ['mean', 'count']}).round(0)

rfm_agg2.columns = rfm_agg2.columns.droplevel()
rfm_agg2.columns = ['RecencyMean','FrequencyMean','MonetaryMean', 'Count']
rfm_agg2['Percent'] = round((rfm_agg2['Count']/rfm_agg2.Count.sum())*100, 2)

# Reset the index
rfm_agg2 = rfm_agg2.reset_index()

# Change thr Cluster Columns Datatype into discrete values
rfm_agg2['Cluster'] = 'Cluster '+ rfm_agg2['Cluster'].astype('str')
rfm_agg2 = rfm_agg2.sort_values(by='Count', ascending=False)

st.write('2. Hu·∫•n luy·ªán m√¥ h√¨nh KMeans Cluster vs k = 4 ta c√≥ ƒë∆∞·ª£c 4 nh√≥m kh√°ch h√†ng theo b·∫£ng b√™n d∆∞·ªõi')
st.dataframe(rfm_agg2)

st.subheader('Bi·ªÉu ƒë·ªì ph√¢n c·ª•m kh√°ch h√†ng theo KMeans Cluster')
#st.write('1. Bi·ªÉu ƒë·ªì TreeMap')
#st.write('2. Bi·ªÉu ƒë·ªì Scatter Plot')
#st.write('2. Bi·ªÉu ƒë·ªì 3d Scatter Plot')

tab_chart = st.radio('Ch·ªçn bi·ªÉu ƒë·ªì',['K√≠ch th∆∞·ªõc theo t·ª´ng ph√¢n c·ª•m kh√°ch h√†ng','Chi ti√™u trung b√¨nh theo ph√¢n c·ª•m kh√°ch h√†ng','Scatter plot RFM','3d Scatter plot RFM'])
if tab_chart == 'K√≠ch th∆∞·ªõc theo t·ª´ng ph√¢n c·ª•m kh√°ch h√†ng':
    fig1 = alt.Chart(rfm_agg2).mark_bar().encode(x=alt.X('Cluster', sort=None), y='Count')
    st.altair_chart(fig1, use_container_width=True)
elif tab_chart == 'Chi ti√™u trung b√¨nh theo ph√¢n c·ª•m kh√°ch h√†ng':
    fig2 = alt.Chart(rfm_agg2).mark_bar().encode(x=alt.X('Cluster', sort=None), y='MonetaryMean')
    st.altair_chart(fig2, use_container_width=True)
elif tab_chart == 'Scatter plot RFM':
    fig3 = px.scatter(rfm_agg2, x='RecencyMean', y='MonetaryMean', size='FrequencyMean', color='Cluster', hover_name='Cluster', size_max=100)
    st.plotly_chart(fig3)
else:
    fig4 = px.scatter_3d(df_rfm, x='Recency', y='Frequency', z='Monetary', color='Cluster', opacity=0.5)
    fig4.update_traces(maker=dict(size=5), selector=dict(mode='makers'))
    st.plotly_chart(fig4)

st.write('''D·ª±a v√†o k·∫øt qu·∫£ ph√¢n c·ª•m c·ªßa thu·∫≠t to√°n KMeans, ta c√≥ th·ªÉ chia c√°c nh√≥m kh√°ch h√†ng nh∆∞ sau:
- Cluster 3 - VIP: nh√≥m kh√°ch h√†ng c√≥ Recency r·∫•t g·∫ßn, Frequency cao v√† Monetary cao. ƒê√¢y l√† nh√≥m kh√°ch h√†ng c√≥ m·ª©c chi ti√™u cao nh∆∞ng l·∫°i chi·∫øm s·ªë l∆∞·ª£ng kh√° √≠t
- Cluster 2 - REGULAR: nh√≥m kh√°ch h√†ng c√≥ Recency g·∫ßn ƒë√¢y, Frequency trung b√¨nh v√† Monetary trung b√¨nh 
- Cluster 1 - COLD: nh√≥m kh√°ch h√†ng c√≥ Recency l√¢u h∆°n, Frequency th·∫•p v√† Monetary th·∫•p
- Cluster 0 - CHURN: nh√≥m kh√°ch h√†ng c√≥ Recency r·∫•t l√¢u, Frequency v√† Monetary r·∫•t th·∫•p
''')

st.subheader('K·∫øt lu·∫≠n')
st.write(''' K·∫øt qu·∫£ ph√¢n c·ª•m c·ªßa thu·∫≠t to√°n KMeans h·ª£p l√Ω v√† c√≥ th·ªÉ gi·∫£i th√≠ch d·ªÖ d√†ng. Do ƒë√≥ ta ch·ªçn v√† l∆∞u model c·ªßa thu·∫≠t to√°n KMeans ƒë·ªÉ d√πng cho vi·ªác d·ª± ƒëo√°n.
''')

pickle.dump(model, open('kmeans_model.pkl','wb'))